{
  "metadata": {
    "title": "Neurosynth API endpoint design",
    "dates": {
      "created": "10/14/2025 21:02:25",
      "updated": "10/14/2025 21:12:34",
      "exported": "10/14/2025 21:15:17"
    },
    "link": "https://claude.ai/chat/f4b21595-88c8-48d0-bef3-011ea0a23876",
    "powered_by": "Claude Exporter (https://www.claudexporter.com)"
  },
  "messages": [
    {
      "role": "Prompt",
      "time": "10/14/2025, 9:02:26 PM",
      "say": "File:\n\nThis is my code. When i test https://neurosynth-nano-chiapie.onrender.com/ it showed, help me fix it and update other endpoints based on this README\n\n\nEndpoints\n\n\nDissociate by terms\n\n\nGET /dissociate/terms/<term_a>/<term_b>\n\n\nReturns studies that mention term_a but not term_b.\nExamples\n\n\n/dissociate/terms/posterior_cingulate/ventromedial_prefrontal\n/dissociate/terms/ventromedial_prefrontal/posterior_cingulate\n\n\n\nDissociate by MNI coordinates\n\n\nGET /dissociate/locations/<x1_y1_z1>/<x2_y2_z2>\n\n\nCoordinates are passed as x_y_z (underscores, not commas).\nReturns studies that mention [x1, y1, z1] but not [x2, y2, z2].\nDefault Mode Network test case\n\n\n/dissociate/locations/0_-52_26/-2_50_-6\n/dissociate/locations/-2_50_-6/0_-52_26\n\nTip: You may design a single endpoint that returns both directions in one response (A–B and B–A) if that better suits your client.\n\n\nQuick Start\n\n\n1) Provision PostgreSQL\n\n\nCreate a PostgreSQL database (e.g., on Render).\n\n\n2) Verify the connection\n\n\npython check_db.py --url \"postgresql://<USER>:<PASSWORD>@<HOST>:5432/<DBNAME>\"\n\n\n3) Populate the database\n\n\npython create_db.py --url \"postgresql://<USER>:<PASSWORD>@<HOST>:5432/<DBNAME>\"\n\n\n4) Run the Flask service\n\n\nDeploy app.py as a Web Service (e.g., on Render) and set the environment variable:\n\n\nDB_URL=postgresql://<USER>:<PASSWORD>@<HOST>:5432/<DBNAME>\nUse a production server such as Gunicorn as your start command:\n\n\ngunicorn app:app --bind 0.0.0.0:$PORT\n\n\n5) Smoke tests\n\n\nAfter deployment, check the basic endpoints:\n\n\nImages: https://<your-app>.onrender.com/img\n\nDB connectivity: https://<your-app>.onrender.com/test_db\n\n\n\nEnvironment Variables\n\n\nDB_URL – Full PostgreSQL connection string used by the app.\nExample: postgresql://<USER>:<PASSWORD>@<HOST>:5432/<DBNAME>Security note: Never commit real credentials to version control. Use environment variables or your hosting provider’s secret manager.\n\n\n\nExample Requests\n\n\nBy terms\n\n\ncurl https://<your-app>.onrender.com/dissociate/terms/posterior_cingulate/ventromedial_prefrontal\ncurl https://<your-app>.onrender.com/dissociate/terms/ventromedial_prefrontal/posterior_cingulate\n\n\nBy coordinates\n\n\ncurl https://<your-app>.onrender.com/dissociate/locations/0_-52_26/-2_50_-6\ncurl https://<your-app>.onrender.com/dissociate/locations/-2_50_-6/0_-52_26\n\n\n\nRequirements\n\n\nPython 3.10+\n\nPostgreSQL 12+\n\nPython dependencies (typical):\nFlask\n\nSQLAlchemy\n\nPostgreSQL driver (e.g., psycopg2-binary)\n\nProduction WSGI server (e.g., gunicorn)\n\n\n\nNotes\n\n\nPath parameters use underscores (_) between coordinates: x_y_z.\n\nTerm strings should be URL-safe (e.g., posterior_cingulate, ventromedial_prefrontal). Replace spaces with underscores on the client if needed.\n\nThe term/coordinate pairs above illustrate a Default Mode Network dissociation example. Adjust for your analysis."
    },
    {
      "role": "Response",
      "time": "10/14/2025, 9:03:11 PM",
      "say": "I can see the issue - you have a critical bug in the get_engine() function. You're passing the entire database URL as a string to os.getenv() instead of passing the environment variable name. Let me fix this and update the code:\n\n\napp.py - Fixed Flask Backend\n\n\nfrom flask import Flask, jsonify, abort, send_file\nimport os\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import OperationalError\n\n_engine = None\n\ndef get_engine():\n    global _engine\n    if _engine is not None:\n        return _engine\n    \n    # Fix: Get the environment variable, not the URL string itself\n    db_url = os.getenv(\"DB_URL\") or os.getenv(\"DATABASE_URL\")\n    if not db_url:\n        raise RuntimeError(\"Missing DB_URL (or DATABASE_URL) environment variable.\")\n    \n    # Normalize old 'postgres://' scheme to 'postgresql://'\n    if db_url.startswith(\"postgres://\"):\n        db_url = \"postgresql://\" + db_url[len(\"postgres://\"):]\n    \n    _engine = create_engine(\n        db_url,\n        pool_pre_ping=True,\n    )\n    return _engine\n\ndef create_app():\n    app = Flask(__name__)\n\n    @app.get(\"/\", endpoint=\"health\")\n    def health():\n        return \"<p>Server working!</p>\"\n\n    @app.get(\"/img\", endpoint=\"show_img\")\n    def show_img():\n        return send_file(\"amygdala.gif\", mimetype=\"image/gif\")\n\n    @app.get(\"/terms/<term>/studies\", endpoint=\"terms_studies\")\n    def get_studies_by_term(term):\n        \"\"\"Get studies that mention a specific term\"\"\"\n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                studies = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term\n                \"\"\"), {\"term\": term}).scalars().all()\n                \n                return jsonify({\n                    \"term\": term,\n                    \"studies\": list(studies),\n                    \"count\": len(studies)\n                })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/locations/<coords>/studies\", endpoint=\"locations_studies\")\n    def get_studies_by_coordinates(coords):\n        \"\"\"Get studies that report a specific MNI coordinate\"\"\"\n        try:\n            x, y, z = map(int, coords.split(\"_\"))\n        except Exception:\n            abort(400, \"Coordinates must be in x_y_z format.\")\n        \n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                studies = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x AND ST_Y(geom) = :y AND ST_Z(geom) = :z\n                \"\"\"), {\"x\": x, \"y\": y, \"z\": z}).scalars().all()\n                \n                return jsonify({\n                    \"coordinates\": [x, y, z],\n                    \"studies\": list(studies),\n                    \"count\": len(studies)\n                })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/test_db\", endpoint=\"test_db\")\n    def test_db():\n        \"\"\"Test database connectivity and show sample data\"\"\"\n        eng = get_engine()\n        payload = {\"ok\": False, \"dialect\": eng.dialect.name}\n\n        try:\n            with eng.begin() as conn:\n                # Ensure we are in the correct schema\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                payload[\"version\"] = conn.exec_driver_sql(\"SELECT version()\").scalar()\n\n                # Counts\n                payload[\"coordinates_count\"] = conn.execute(text(\"SELECT COUNT(*) FROM ns.coordinates\")).scalar()\n                payload[\"metadata_count\"] = conn.execute(text(\"SELECT COUNT(*) FROM ns.metadata\")).scalar()\n                payload[\"annotations_terms_count\"] = conn.execute(text(\"SELECT COUNT(*) FROM ns.annotations_terms\")).scalar()\n\n                # Samples\n                try:\n                    rows = conn.execute(text(\n                        \"SELECT study_id, ST_X(geom) AS x, ST_Y(geom) AS y, ST_Z(geom) AS z FROM ns.coordinates LIMIT 3\"\n                    )).mappings().all()\n                    payload[\"coordinates_sample\"] = [dict(r) for r in rows]\n                except Exception:\n                    payload[\"coordinates_sample\"] = []\n\n                try:\n                    rows = conn.execute(text(\"SELECT * FROM ns.metadata LIMIT 3\")).mappings().all()\n                    payload[\"metadata_sample\"] = [dict(r) for r in rows]\n                except Exception:\n                    payload[\"metadata_sample\"] = []\n\n                try:\n                    rows = conn.execute(text(\n                        \"SELECT study_id, contrast_id, term, weight FROM ns.annotations_terms LIMIT 3\"\n                    )).mappings().all()\n                    payload[\"annotations_terms_sample\"] = [dict(r) for r in rows]\n                except Exception:\n                    payload[\"annotations_terms_sample\"] = []\n\n            payload[\"ok\"] = True\n            return jsonify(payload), 200\n\n        except Exception as e:\n            payload[\"error\"] = str(e)\n            return jsonify(payload), 500\n\n    @app.get(\"/dissociate/terms/<term_a>/<term_b>\", endpoint=\"dissociate_terms\")\n    def dissociate_terms(term_a, term_b):\n        \"\"\"Find studies that mention one term but not the other\"\"\"\n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                \n                # Studies mentioning term_a but not term_b\n                studies_a = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term_a\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.annotations_terms WHERE term = :term_b\n                    )\n                \"\"\"), {\"term_a\": term_a, \"term_b\": term_b}).scalars().all()\n\n                # Studies mentioning term_b but not term_a\n                studies_b = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term_b\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.annotations_terms WHERE term = :term_a\n                    )\n                \"\"\"), {\"term_a\": term_a, \"term_b\": term_b}).scalars().all()\n\n                payload = {\n                    \"A_minus_B\": list(studies_a),\n                    \"B_minus_A\": list(studies_b),\n                    \"term_a\": term_a,\n                    \"term_b\": term_b,\n                    \"count_a_minus_b\": len(studies_a),\n                    \"count_b_minus_a\": len(studies_b)\n                }\n                return jsonify(payload)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/dissociate/locations/<coords_a>/<coords_b>\", endpoint=\"dissociate_locations\")\n    def dissociate_locations(coords_a, coords_b):\n        \"\"\"Find studies that report one coordinate but not the other\"\"\"\n        eng = get_engine()\n        try:\n            x1, y1, z1 = map(int, coords_a.split(\"_\"))\n            x2, y2, z2 = map(int, coords_b.split(\"_\"))\n        except Exception:\n            abort(400, \"Coordinates must be in x_y_z format.\")\n\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                \n                # Studies mentioning coords_a but not coords_b\n                studies_a = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x1 AND ST_Y(geom) = :y1 AND ST_Z(geom) = :z1\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.coordinates\n                        WHERE ST_X(geom) = :x2 AND ST_Y(geom) = :y2 AND ST_Z(geom) = :z2\n                    )\n                \"\"\"), {\"x1\": x1, \"y1\": y1, \"z1\": z1, \"x2\": x2, \"y2\": y2, \"z2\": z2}).scalars().all()\n\n                # Studies mentioning coords_b but not coords_a\n                studies_b = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x2 AND ST_Y(geom) = :y2 AND ST_Z(geom) = :z2\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.coordinates\n                        WHERE ST_X(geom) = :x1 AND ST_Y(geom) = :y1 AND ST_Z(geom) = :z1\n                    )\n                \"\"\"), {\"x1\": x1, \"y1\": y1, \"z1\": z1, \"x2\": x2, \"y2\": y2, \"z2\": z2}).scalars().all()\n\n                payload = {\n                    \"A_minus_B\": list(studies_a),\n                    \"B_minus_A\": list(studies_b),\n                    \"coords_a\": [x1, y1, z1],\n                    \"coords_b\": [x2, y2, z2],\n                    \"count_a_minus_b\": len(studies_a),\n                    \"count_b_minus_a\": len(studies_b)\n                }\n                return jsonify(payload)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    return app\n\n# WSGI entry point\napp = create_app()\n\n\nKey Fixes\n\n\n1. Critical Bug Fixed 🐛\n\n\nLine 14-15: Changed from:\n\n\ndb_url = os.getenv(\"postgresql://neurosynth_backend_user:...\")\n\n\nTo:\n\n\ndb_url = os.getenv(\"DB_URL\") or os.getenv(\"DATABASE_URL\")\n\n\nThe original code was passing the entire database URL as the environment variable name instead of \"DB_URL\"!\n\n\n2. Enhanced Endpoints\n\n\n/terms/<term>/studies - Now actually queries the database and returns studies mentioning that term\n\n/locations/<coords>/studies - Now queries for studies at specific MNI coordinates\n\nAdded proper error handling and response formatting with counts\n\n\n3. Improved Response Format\n\n\nAll endpoints now return consistent JSON with:\n\n\nThe queried parameters\n\nLists of study IDs\n\nCounts for easy verification\n\n\nNext Steps\n\n\nUpdate your Render environment variable:\n\n\nGo to your Render dashboard\n\nFind your service settings\n\nSet DB_URL to: postgresql://neurosynth_backend_user:ARs3Ha51JCRJKmUULGA4VwoqqQY0cuUe@dpg-d3hoecp5pdvs73feejo0-a.oregon-postgres.render.com/neurosynth_backend\n\nRedeploy your service on Render\n\nTest the endpoints:\n\n\nHealth: https://neurosynth-nano-chiapie.onrender.com/\n\nDB test: https://neurosynth-nano-chiapie.onrender.com/test_db\n\nDissociate: https://neurosynth-nano-chiapie.onrender.com/dissociate/terms/posterior_cingulate/ventromedial_prefrontal\n\n\nThe 502 error should be resolved once the environment variable is properly configured!"
    },
    {
      "role": "Prompt",
      "time": "10/14/2025, 9:11:45 PM",
      "say": "The result of \"https://neurosynth-nano-chiapie.onrender.com/dissociate/locations/0_-52_26/-2_50_-6\" showed {\"A_minus_B\":[\"24027520\",\"26197092\"],\"B_minus_A\":[\"17611124\",\"17950623\",\"19199412\",\"27601666\",\"28602963\"],\"coords_a\":[0,-52,26],\"coords_b\":[-2,50,-6],\"count_a_minus_b\":2,\"count_b_minus_a\":5}\n\n\nreplace the A_minus_B and B_minus_A terms\n\n\nand \"https://neurosynth-nano-chiapie.onrender.com/test_db\" showed in the image. Make it more presentable in either simple table format"
    },
    {
      "role": "Response",
      "time": "10/14/2025, 9:12:34 PM",
      "say": "app.py - Fixed Flask Backend ∙ Version 2\n\n\nfrom flask import Flask, jsonify, abort, send_file\nimport os\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import OperationalError\n\n_engine = None\n\ndef get_engine():\n    global _engine\n    if _engine is not None:\n        return _engine\n    \n    # Fix: Get the environment variable, not the URL string itself\n    db_url = os.getenv(\"DB_URL\") or os.getenv(\"DATABASE_URL\")\n    if not db_url:\n        raise RuntimeError(\"Missing DB_URL (or DATABASE_URL) environment variable.\")\n    \n    # Normalize old 'postgres://' scheme to 'postgresql://'\n    if db_url.startswith(\"postgres://\"):\n        db_url = \"postgresql://\" + db_url[len(\"postgres://\"):]\n    \n    _engine = create_engine(\n        db_url,\n        pool_pre_ping=True,\n    )\n    return _engine\n\ndef create_app():\n    app = Flask(__name__)\n\n    @app.get(\"/\", endpoint=\"health\")\n    def health():\n        return \"<p>Server working!</p>\"\n\n    @app.get(\"/img\", endpoint=\"show_img\")\n    def show_img():\n        return send_file(\"amygdala.gif\", mimetype=\"image/gif\")\n\n    @app.get(\"/terms/<term>/studies\", endpoint=\"terms_studies\")\n    def get_studies_by_term(term):\n        \"\"\"Get studies that mention a specific term\"\"\"\n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                studies = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term\n                \"\"\"), {\"term\": term}).scalars().all()\n                \n                return jsonify({\n                    \"term\": term,\n                    \"studies\": list(studies),\n                    \"count\": len(studies)\n                })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/locations/<coords>/studies\", endpoint=\"locations_studies\")\n    def get_studies_by_coordinates(coords):\n        \"\"\"Get studies that report a specific MNI coordinate\"\"\"\n        try:\n            x, y, z = map(int, coords.split(\"_\"))\n        except Exception:\n            abort(400, \"Coordinates must be in x_y_z format.\")\n        \n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                studies = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x AND ST_Y(geom) = :y AND ST_Z(geom) = :z\n                \"\"\"), {\"x\": x, \"y\": y, \"z\": z}).scalars().all()\n                \n                return jsonify({\n                    \"coordinates\": [x, y, z],\n                    \"studies\": list(studies),\n                    \"count\": len(studies)\n                })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/test_db\", endpoint=\"test_db\")\n    def test_db():\n        \"\"\"Test database connectivity and show sample data\"\"\"\n        eng = get_engine()\n        \n        try:\n            with eng.begin() as conn:\n                # Ensure we are in the correct schema\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                version = conn.exec_driver_sql(\"SELECT version()\").scalar()\n\n                # Counts\n                coordinates_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.coordinates\")).scalar()\n                metadata_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.metadata\")).scalar()\n                annotations_terms_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.annotations_terms\")).scalar()\n\n                # Samples\n                coordinates_sample = []\n                try:\n                    rows = conn.execute(text(\n                        \"SELECT study_id, ST_X(geom) AS x, ST_Y(geom) AS y, ST_Z(geom) AS z FROM ns.coordinates LIMIT 3\"\n                    )).mappings().all()\n                    coordinates_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n                metadata_sample = []\n                try:\n                    rows = conn.execute(text(\"SELECT * FROM ns.metadata LIMIT 3\")).mappings().all()\n                    metadata_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n                annotations_sample = []\n                try:\n                    rows = conn.execute(text(\n                        \"SELECT study_id, contrast_id, term, weight FROM ns.annotations_terms LIMIT 3\"\n                    )).mappings().all()\n                    annotations_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n            # Build HTML response\n            html = f\"\"\"\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>Database Connection Test</title>\n                <style>\n                    body {{\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n                        max-width: 1200px;\n                        margin: 40px auto;\n                        padding: 20px;\n                        background: #f5f5f5;\n                    }}\n                    .status {{\n                        background: #4caf50;\n                        color: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                        margin-bottom: 20px;\n                    }}\n                    .section {{\n                        background: white;\n                        padding: 20px;\n                        margin-bottom: 20px;\n                        border-radius: 8px;\n                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                    }}\n                    h1, h2 {{\n                        margin-top: 0;\n                    }}\n                    table {{\n                        width: 100%;\n                        border-collapse: collapse;\n                        margin-top: 10px;\n                    }}\n                    th, td {{\n                        padding: 12px;\n                        text-align: left;\n                        border-bottom: 1px solid #ddd;\n                    }}\n                    th {{\n                        background: #f8f9fa;\n                        font-weight: 600;\n                    }}\n                    .count {{\n                        font-size: 32px;\n                        font-weight: bold;\n                        color: #1976d2;\n                    }}\n                    .label {{\n                        color: #666;\n                        font-size: 14px;\n                    }}\n                    .grid {{\n                        display: grid;\n                        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n                        gap: 20px;\n                        margin-bottom: 20px;\n                    }}\n                    .stat-card {{\n                        background: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                        text-align: center;\n                    }}\n                </style>\n            </head>\n            <body>\n                <div class=\"status\">\n                    <h1>✓ Database Connection Successful</h1>\n                    <p><strong>PostgreSQL Version:</strong> {version[:50]}...</p>\n                </div>\n\n                <div class=\"grid\">\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{coordinates_count:,}</div>\n                        <div class=\"label\">Coordinates</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{metadata_count:,}</div>\n                        <div class=\"label\">Metadata Records</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{annotations_terms_count:,}</div>\n                        <div class=\"label\">Annotation Terms</div>\n                    </div>\n                </div>\n\n                <div class=\"section\">\n                    <h2>Sample Coordinates</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Study ID</th>\n                                <th>X</th>\n                                <th>Y</th>\n                                <th>Z</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n            \"\"\"\n            \n            for row in coordinates_sample:\n                html += f\"\"\"\n                            <tr>\n                                <td>{row['study_id']}</td>\n                                <td>{row['x']}</td>\n                                <td>{row['y']}</td>\n                                <td>{row['z']}</td>\n                            </tr>\n                \"\"\"\n            \n            html += \"\"\"\n                        </tbody>\n                    </table>\n                </div>\n\n                <div class=\"section\">\n                    <h2>Sample Annotation Terms</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Study ID</th>\n                                <th>Contrast ID</th>\n                                <th>Term</th>\n                                <th>Weight</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n            \"\"\"\n            \n            for row in annotations_sample:\n                html += f\"\"\"\n                            <tr>\n                                <td>{row['study_id']}</td>\n                                <td>{row['contrast_id']}</td>\n                                <td>{row['term']}</td>\n                                <td>{row['weight']:.4f}</td>\n                            </tr>\n                \"\"\"\n            \n            html += \"\"\"\n                        </tbody>\n                    </table>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n            \n            return html\n\n        except Exception as e:\n            error_html = f\"\"\"\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>Database Error</title>\n                <style>\n                    body {{\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n                        max-width: 800px;\n                        margin: 40px auto;\n                        padding: 20px;\n                    }}\n                    .error {{\n                        background: #f44336;\n                        color: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                    }}\n                    pre {{\n                        background: #f5f5f5;\n                        padding: 15px;\n                        border-radius: 4px;\n                        overflow-x: auto;\n                    }}\n                </style>\n            </head>\n            <body>\n                <div class=\"error\">\n                    <h1>✗ Database Connection Failed</h1>\n                    <p><strong>Error:</strong></p>\n                    <pre>{str(e)}</pre>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n            return error_html, 500\n\n    @app.get(\"/dissociate/terms/<term_a>/<term_b>\", endpoint=\"dissociate_terms\")\n    def dissociate_terms(term_a, term_b):\n        \"\"\"Find studies that mention one term but not the other\"\"\"\n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                \n                # Studies mentioning term_a but not term_b\n                studies_a = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term_a\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.annotations_terms WHERE term = :term_b\n                    )\n                \"\"\"), {\"term_a\": term_a, \"term_b\": term_b}).scalars().all()\n\n                # Studies mentioning term_b but not term_a\n                studies_b = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term_b\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.annotations_terms WHERE term = :term_a\n                    )\n                \"\"\"), {\"term_a\": term_a, \"term_b\": term_b}).scalars().all()\n\n                payload = {\n                    \"A_minus_B\": list(studies_a),\n                    \"B_minus_A\": list(studies_b),\n                    \"term_a\": term_a,\n                    \"term_b\": term_b,\n                    \"count_a_minus_b\": len(studies_a),\n                    \"count_b_minus_a\": len(studies_b)\n                }\n                return jsonify(payload)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/dissociate/locations/<coords_a>/<coords_b>\", endpoint=\"dissociate_locations\")\n    def dissociate_locations(coords_a, coords_b):\n        \"\"\"Find studies that report one coordinate but not the other\"\"\"\n        eng = get_engine()\n        try:\n            x1, y1, z1 = map(int, coords_a.split(\"_\"))\n            x2, y2, z2 = map(int, coords_b.split(\"_\"))\n        except Exception:\n            abort(400, \"Coordinates must be in x_y_z format.\")\n\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                \n                # Studies mentioning coords_a but not coords_b\n                studies_a = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x1 AND ST_Y(geom) = :y1 AND ST_Z(geom) = :z1\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.coordinates\n                        WHERE ST_X(geom) = :x2 AND ST_Y(geom) = :y2 AND ST_Z(geom) = :z2\n                    )\n                \"\"\"), {\"x1\": x1, \"y1\": y1, \"z1\": z1, \"x2\": x2, \"y2\": y2, \"z2\": z2}).scalars().all()\n\n                # Studies mentioning coords_b but not coords_a\n                studies_b = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x2 AND ST_Y(geom) = :y2 AND ST_Z(geom) = :z2\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.coordinates\n                        WHERE ST_X(geom) = :x1 AND ST_Y(geom) = :y1 AND ST_Z(geom) = :z1\n                    )\n                \"\"\"), {\"x1\": x1, \"y1\": y1, \"z1\": z1, \"x2\": x2, \"y2\": y2, \"z2\": z2}).scalars().all()\n\n                payload = {\n                    \"A_minus_B\": list(studies_a),\n                    \"B_minus_A\": list(studies_b),\n                    \"coords_a\": [x1, y1, z1],\n                    \"coords_b\": [x2, y2, z2],\n                    \"count_a_minus_b\": len(studies_a),\n                    \"count_b_minus_a\": len(studies_b)\n                }\n                return jsonify(payload)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    return app\n\n# WSGI entry point\napp = create_app()\n\n\napp.py - Fixed Flask Backend ∙ Version 3\n\n\nfrom flask import Flask, jsonify, abort, send_file\nimport os\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import OperationalError\n\n_engine = None\n\ndef get_engine():\n    global _engine\n    if _engine is not None:\n        return _engine\n    \n    # Fix: Get the environment variable, not the URL string itself\n    db_url = os.getenv(\"DB_URL\") or os.getenv(\"DATABASE_URL\")\n    if not db_url:\n        raise RuntimeError(\"Missing DB_URL (or DATABASE_URL) environment variable.\")\n    \n    # Normalize old 'postgres://' scheme to 'postgresql://'\n    if db_url.startswith(\"postgres://\"):\n        db_url = \"postgresql://\" + db_url[len(\"postgres://\"):]\n    \n    _engine = create_engine(\n        db_url,\n        pool_pre_ping=True,\n    )\n    return _engine\n\ndef create_app():\n    app = Flask(__name__)\n\n    @app.get(\"/\", endpoint=\"health\")\n    def health():\n        return \"<p>Server working!</p>\"\n\n    @app.get(\"/img\", endpoint=\"show_img\")\n    def show_img():\n        return send_file(\"amygdala.gif\", mimetype=\"image/gif\")\n\n    @app.get(\"/terms/<term>/studies\", endpoint=\"terms_studies\")\n    def get_studies_by_term(term):\n        \"\"\"Get studies that mention a specific term\"\"\"\n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                studies = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term\n                \"\"\"), {\"term\": term}).scalars().all()\n                \n                return jsonify({\n                    \"term\": term,\n                    \"studies\": list(studies),\n                    \"count\": len(studies)\n                })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/locations/<coords>/studies\", endpoint=\"locations_studies\")\n    def get_studies_by_coordinates(coords):\n        \"\"\"Get studies that report a specific MNI coordinate\"\"\"\n        try:\n            x, y, z = map(int, coords.split(\"_\"))\n        except Exception:\n            abort(400, \"Coordinates must be in x_y_z format.\")\n        \n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                studies = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x AND ST_Y(geom) = :y AND ST_Z(geom) = :z\n                \"\"\"), {\"x\": x, \"y\": y, \"z\": z}).scalars().all()\n                \n                return jsonify({\n                    \"coordinates\": [x, y, z],\n                    \"studies\": list(studies),\n                    \"count\": len(studies)\n                })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/test_db\", endpoint=\"test_db\")\n    def test_db():\n        \"\"\"Test database connectivity and show sample data\"\"\"\n        eng = get_engine()\n        \n        try:\n            with eng.begin() as conn:\n                # Ensure we are in the correct schema\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                version = conn.exec_driver_sql(\"SELECT version()\").scalar()\n\n                # Counts\n                coordinates_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.coordinates\")).scalar()\n                metadata_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.metadata\")).scalar()\n                annotations_terms_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.annotations_terms\")).scalar()\n\n                # Samples\n                coordinates_sample = []\n                try:\n                    rows = conn.execute(text(\n                        \"SELECT study_id, ST_X(geom) AS x, ST_Y(geom) AS y, ST_Z(geom) AS z FROM ns.coordinates LIMIT 3\"\n                    )).mappings().all()\n                    coordinates_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n                metadata_sample = []\n                try:\n                    rows = conn.execute(text(\"SELECT * FROM ns.metadata LIMIT 3\")).mappings().all()\n                    metadata_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n                annotations_sample = []\n                try:\n                    rows = conn.execute(text(\n                        \"SELECT study_id, contrast_id, term, weight FROM ns.annotations_terms LIMIT 3\"\n                    )).mappings().all()\n                    annotations_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n            # Build HTML response\n            html = f\"\"\"\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>Database Connection Test</title>\n                <style>\n                    body {{\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n                        max-width: 1200px;\n                        margin: 40px auto;\n                        padding: 20px;\n                        background: #f5f5f5;\n                    }}\n                    .status {{\n                        background: #4caf50;\n                        color: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                        margin-bottom: 20px;\n                    }}\n                    .section {{\n                        background: white;\n                        padding: 20px;\n                        margin-bottom: 20px;\n                        border-radius: 8px;\n                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                    }}\n                    h1, h2 {{\n                        margin-top: 0;\n                    }}\n                    table {{\n                        width: 100%;\n                        border-collapse: collapse;\n                        margin-top: 10px;\n                    }}\n                    th, td {{\n                        padding: 12px;\n                        text-align: left;\n                        border-bottom: 1px solid #ddd;\n                    }}\n                    th {{\n                        background: #f8f9fa;\n                        font-weight: 600;\n                    }}\n                    .count {{\n                        font-size: 32px;\n                        font-weight: bold;\n                        color: #1976d2;\n                    }}\n                    .label {{\n                        color: #666;\n                        font-size: 14px;\n                    }}\n                    .grid {{\n                        display: grid;\n                        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n                        gap: 20px;\n                        margin-bottom: 20px;\n                    }}\n                    .stat-card {{\n                        background: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                        text-align: center;\n                    }}\n                </style>\n            </head>\n            <body>\n                <div class=\"status\">\n                    <h1>✓ Database Connection Successful</h1>\n                    <p><strong>PostgreSQL Version:</strong> {version[:50]}...</p>\n                </div>\n\n                <div class=\"grid\">\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{coordinates_count:,}</div>\n                        <div class=\"label\">Coordinates</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{metadata_count:,}</div>\n                        <div class=\"label\">Metadata Records</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{annotations_terms_count:,}</div>\n                        <div class=\"label\">Annotation Terms</div>\n                    </div>\n                </div>\n\n                <div class=\"section\">\n                    <h2>Sample Coordinates</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Study ID</th>\n                                <th>X</th>\n                                <th>Y</th>\n                                <th>Z</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n            \"\"\"\n            \n            for row in coordinates_sample:\n                html += f\"\"\"\n                            <tr>\n                                <td>{row['study_id']}</td>\n                                <td>{row['x']}</td>\n                                <td>{row['y']}</td>\n                                <td>{row['z']}</td>\n                            </tr>\n                \"\"\"\n            \n            html += \"\"\"\n                        </tbody>\n                    </table>\n                </div>\n\n                <div class=\"section\">\n                    <h2>Sample Annotation Terms</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Study ID</th>\n                                <th>Contrast ID</th>\n                                <th>Term</th>\n                                <th>Weight</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n            \"\"\"\n            \n            for row in annotations_sample:\n                html += f\"\"\"\n                            <tr>\n                                <td>{row['study_id']}</td>\n                                <td>{row['contrast_id']}</td>\n                                <td>{row['term']}</td>\n                                <td>{row['weight']:.4f}</td>\n                            </tr>\n                \"\"\"\n            \n            html += \"\"\"\n                        </tbody>\n                    </table>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n            \n            return html\n\n        except Exception as e:\n            error_html = f\"\"\"\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>Database Error</title>\n                <style>\n                    body {{\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n                        max-width: 800px;\n                        margin: 40px auto;\n                        padding: 20px;\n                    }}\n                    .error {{\n                        background: #f44336;\n                        color: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                    }}\n                    pre {{\n                        background: #f5f5f5;\n                        padding: 15px;\n                        border-radius: 4px;\n                        overflow-x: auto;\n                    }}\n                </style>\n            </head>\n            <body>\n                <div class=\"error\">\n                    <h1>✗ Database Connection Failed</h1>\n                    <p><strong>Error:</strong></p>\n                    <pre>{str(e)}</pre>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n            return error_html, 500\n\n    @app.get(\"/dissociate/terms/<term_a>/<term_b>\", endpoint=\"dissociate_terms\")\n    def dissociate_terms(term_a, term_b):\n        \"\"\"Find studies that mention one term but not the other\"\"\"\n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                \n                # Studies mentioning term_a but not term_b\n                studies_a = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term_a\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.annotations_terms WHERE term = :term_b\n                    )\n                \"\"\"), {\"term_a\": term_a, \"term_b\": term_b}).scalars().all()\n\n                # Studies mentioning term_b but not term_a\n                studies_b = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term_b\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.annotations_terms WHERE term = :term_a\n                    )\n                \"\"\"), {\"term_a\": term_a, \"term_b\": term_b}).scalars().all()\n\n                payload = {\n                    \"studies_with_a_only\": list(studies_a),\n                    \"studies_with_b_only\": list(studies_b),\n                    \"term_a\": term_a,\n                    \"term_b\": term_b,\n                    \"count_a_only\": len(studies_a),\n                    \"count_b_only\": len(studies_b)\n                }\n                return jsonify(payload)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/dissociate/locations/<coords_a>/<coords_b>\", endpoint=\"dissociate_locations\")\n    def dissociate_locations(coords_a, coords_b):\n        \"\"\"Find studies that report one coordinate but not the other\"\"\"\n        eng = get_engine()\n        try:\n            x1, y1, z1 = map(int, coords_a.split(\"_\"))\n            x2, y2, z2 = map(int, coords_b.split(\"_\"))\n        except Exception:\n            abort(400, \"Coordinates must be in x_y_z format.\")\n\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                \n                # Studies mentioning coords_a but not coords_b\n                studies_a = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x1 AND ST_Y(geom) = :y1 AND ST_Z(geom) = :z1\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.coordinates\n                        WHERE ST_X(geom) = :x2 AND ST_Y(geom) = :y2 AND ST_Z(geom) = :z2\n                    )\n                \"\"\"), {\"x1\": x1, \"y1\": y1, \"z1\": z1, \"x2\": x2, \"y2\": y2, \"z2\": z2}).scalars().all()\n\n                # Studies mentioning coords_b but not coords_a\n                studies_b = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x2 AND ST_Y(geom) = :y2 AND ST_Z(geom) = :z2\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.coordinates\n                        WHERE ST_X(geom) = :x1 AND ST_Y(geom) = :y1 AND ST_Z(geom) = :z1\n                    )\n                \"\"\"), {\"x1\": x1, \"y1\": y1, \"z1\": z1, \"x2\": x2, \"y2\": y2, \"z2\": z2}).scalars().all()\n\n                payload = {\n                    \"A_minus_B\": list(studies_a),\n                    \"B_minus_A\": list(studies_b),\n                    \"coords_a\": [x1, y1, z1],\n                    \"coords_b\": [x2, y2, z2],\n                    \"count_a_minus_b\": len(studies_a),\n                    \"count_b_minus_a\": len(studies_b)\n                }\n                return jsonify(payload)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    return app\n\n# WSGI entry point\napp = create_app()\n\n\napp.py - Fixed Flask Backend ∙ Version 4\n\n\nfrom flask import Flask, jsonify, abort, send_file\nimport os\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import OperationalError\n\n_engine = None\n\ndef get_engine():\n    global _engine\n    if _engine is not None:\n        return _engine\n    \n    # Fix: Get the environment variable, not the URL string itself\n    db_url = os.getenv(\"DB_URL\") or os.getenv(\"DATABASE_URL\")\n    if not db_url:\n        raise RuntimeError(\"Missing DB_URL (or DATABASE_URL) environment variable.\")\n    \n    # Normalize old 'postgres://' scheme to 'postgresql://'\n    if db_url.startswith(\"postgres://\"):\n        db_url = \"postgresql://\" + db_url[len(\"postgres://\"):]\n    \n    _engine = create_engine(\n        db_url,\n        pool_pre_ping=True,\n    )\n    return _engine\n\ndef create_app():\n    app = Flask(__name__)\n\n    @app.get(\"/\", endpoint=\"health\")\n    def health():\n        return \"<p>Server working!</p>\"\n\n    @app.get(\"/img\", endpoint=\"show_img\")\n    def show_img():\n        return send_file(\"amygdala.gif\", mimetype=\"image/gif\")\n\n    @app.get(\"/terms/<term>/studies\", endpoint=\"terms_studies\")\n    def get_studies_by_term(term):\n        \"\"\"Get studies that mention a specific term\"\"\"\n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                studies = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term\n                \"\"\"), {\"term\": term}).scalars().all()\n                \n                return jsonify({\n                    \"term\": term,\n                    \"studies\": list(studies),\n                    \"count\": len(studies)\n                })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/locations/<coords>/studies\", endpoint=\"locations_studies\")\n    def get_studies_by_coordinates(coords):\n        \"\"\"Get studies that report a specific MNI coordinate\"\"\"\n        try:\n            x, y, z = map(int, coords.split(\"_\"))\n        except Exception:\n            abort(400, \"Coordinates must be in x_y_z format.\")\n        \n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                studies = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x AND ST_Y(geom) = :y AND ST_Z(geom) = :z\n                \"\"\"), {\"x\": x, \"y\": y, \"z\": z}).scalars().all()\n                \n                return jsonify({\n                    \"coordinates\": [x, y, z],\n                    \"studies\": list(studies),\n                    \"count\": len(studies)\n                })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/test_db\", endpoint=\"test_db\")\n    def test_db():\n        \"\"\"Test database connectivity and show sample data\"\"\"\n        eng = get_engine()\n        \n        try:\n            with eng.begin() as conn:\n                # Ensure we are in the correct schema\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                version = conn.exec_driver_sql(\"SELECT version()\").scalar()\n\n                # Counts\n                coordinates_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.coordinates\")).scalar()\n                metadata_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.metadata\")).scalar()\n                annotations_terms_count = conn.execute(text(\"SELECT COUNT(*) FROM ns.annotations_terms\")).scalar()\n\n                # Samples\n                coordinates_sample = []\n                try:\n                    rows = conn.execute(text(\n                        \"SELECT study_id, ST_X(geom) AS x, ST_Y(geom) AS y, ST_Z(geom) AS z FROM ns.coordinates LIMIT 3\"\n                    )).mappings().all()\n                    coordinates_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n                metadata_sample = []\n                try:\n                    rows = conn.execute(text(\"SELECT * FROM ns.metadata LIMIT 3\")).mappings().all()\n                    metadata_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n                annotations_sample = []\n                try:\n                    rows = conn.execute(text(\n                        \"SELECT study_id, contrast_id, term, weight FROM ns.annotations_terms LIMIT 3\"\n                    )).mappings().all()\n                    annotations_sample = [dict(r) for r in rows]\n                except Exception:\n                    pass\n\n            # Build HTML response\n            html = f\"\"\"\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>Database Connection Test</title>\n                <style>\n                    body {{\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n                        max-width: 1200px;\n                        margin: 40px auto;\n                        padding: 20px;\n                        background: #f5f5f5;\n                    }}\n                    .status {{\n                        background: #4caf50;\n                        color: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                        margin-bottom: 20px;\n                    }}\n                    .section {{\n                        background: white;\n                        padding: 20px;\n                        margin-bottom: 20px;\n                        border-radius: 8px;\n                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                    }}\n                    h1, h2 {{\n                        margin-top: 0;\n                    }}\n                    table {{\n                        width: 100%;\n                        border-collapse: collapse;\n                        margin-top: 10px;\n                    }}\n                    th, td {{\n                        padding: 12px;\n                        text-align: left;\n                        border-bottom: 1px solid #ddd;\n                    }}\n                    th {{\n                        background: #f8f9fa;\n                        font-weight: 600;\n                    }}\n                    .count {{\n                        font-size: 32px;\n                        font-weight: bold;\n                        color: #1976d2;\n                    }}\n                    .label {{\n                        color: #666;\n                        font-size: 14px;\n                    }}\n                    .grid {{\n                        display: grid;\n                        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n                        gap: 20px;\n                        margin-bottom: 20px;\n                    }}\n                    .stat-card {{\n                        background: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                        text-align: center;\n                    }}\n                </style>\n            </head>\n            <body>\n                <div class=\"status\">\n                    <h1>✓ Database Connection Successful</h1>\n                    <p><strong>PostgreSQL Version:</strong> {version[:50]}...</p>\n                </div>\n\n                <div class=\"grid\">\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{coordinates_count:,}</div>\n                        <div class=\"label\">Coordinates</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{metadata_count:,}</div>\n                        <div class=\"label\">Metadata Records</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"count\">{annotations_terms_count:,}</div>\n                        <div class=\"label\">Annotation Terms</div>\n                    </div>\n                </div>\n\n                <div class=\"section\">\n                    <h2>Sample Coordinates</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Study ID</th>\n                                <th>X</th>\n                                <th>Y</th>\n                                <th>Z</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n            \"\"\"\n            \n            for row in coordinates_sample:\n                html += f\"\"\"\n                            <tr>\n                                <td>{row['study_id']}</td>\n                                <td>{row['x']}</td>\n                                <td>{row['y']}</td>\n                                <td>{row['z']}</td>\n                            </tr>\n                \"\"\"\n            \n            html += \"\"\"\n                        </tbody>\n                    </table>\n                </div>\n\n                <div class=\"section\">\n                    <h2>Sample Annotation Terms</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Study ID</th>\n                                <th>Contrast ID</th>\n                                <th>Term</th>\n                                <th>Weight</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n            \"\"\"\n            \n            for row in annotations_sample:\n                html += f\"\"\"\n                            <tr>\n                                <td>{row['study_id']}</td>\n                                <td>{row['contrast_id']}</td>\n                                <td>{row['term']}</td>\n                                <td>{row['weight']:.4f}</td>\n                            </tr>\n                \"\"\"\n            \n            html += \"\"\"\n                        </tbody>\n                    </table>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n            \n            return html\n\n        except Exception as e:\n            error_html = f\"\"\"\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>Database Error</title>\n                <style>\n                    body {{\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n                        max-width: 800px;\n                        margin: 40px auto;\n                        padding: 20px;\n                    }}\n                    .error {{\n                        background: #f44336;\n                        color: white;\n                        padding: 20px;\n                        border-radius: 8px;\n                    }}\n                    pre {{\n                        background: #f5f5f5;\n                        padding: 15px;\n                        border-radius: 4px;\n                        overflow-x: auto;\n                    }}\n                </style>\n            </head>\n            <body>\n                <div class=\"error\">\n                    <h1>✗ Database Connection Failed</h1>\n                    <p><strong>Error:</strong></p>\n                    <pre>{str(e)}</pre>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n            return error_html, 500\n\n    @app.get(\"/dissociate/terms/<term_a>/<term_b>\", endpoint=\"dissociate_terms\")\n    def dissociate_terms(term_a, term_b):\n        \"\"\"Find studies that mention one term but not the other\"\"\"\n        eng = get_engine()\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                \n                # Studies mentioning term_a but not term_b\n                studies_a = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term_a\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.annotations_terms WHERE term = :term_b\n                    )\n                \"\"\"), {\"term_a\": term_a, \"term_b\": term_b}).scalars().all()\n\n                # Studies mentioning term_b but not term_a\n                studies_b = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.annotations_terms\n                    WHERE term = :term_b\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.annotations_terms WHERE term = :term_a\n                    )\n                \"\"\"), {\"term_a\": term_a, \"term_b\": term_b}).scalars().all()\n\n                payload = {\n                    \"studies_with_a_only\": list(studies_a),\n                    \"studies_with_b_only\": list(studies_b),\n                    \"term_a\": term_a,\n                    \"term_b\": term_b,\n                    \"count_a_only\": len(studies_a),\n                    \"count_b_only\": len(studies_b)\n                }\n                return jsonify(payload)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    @app.get(\"/dissociate/locations/<coords_a>/<coords_b>\", endpoint=\"dissociate_locations\")\n    def dissociate_locations(coords_a, coords_b):\n        \"\"\"Find studies that report one coordinate but not the other\"\"\"\n        eng = get_engine()\n        try:\n            x1, y1, z1 = map(int, coords_a.split(\"_\"))\n            x2, y2, z2 = map(int, coords_b.split(\"_\"))\n        except Exception:\n            abort(400, \"Coordinates must be in x_y_z format.\")\n\n        try:\n            with eng.begin() as conn:\n                conn.execute(text(\"SET search_path TO ns, public;\"))\n                \n                # Studies mentioning coords_a but not coords_b\n                studies_a = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x1 AND ST_Y(geom) = :y1 AND ST_Z(geom) = :z1\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.coordinates\n                        WHERE ST_X(geom) = :x2 AND ST_Y(geom) = :y2 AND ST_Z(geom) = :z2\n                    )\n                \"\"\"), {\"x1\": x1, \"y1\": y1, \"z1\": z1, \"x2\": x2, \"y2\": y2, \"z2\": z2}).scalars().all()\n\n                # Studies mentioning coords_b but not coords_a\n                studies_b = conn.execute(text(\"\"\"\n                    SELECT DISTINCT study_id\n                    FROM ns.coordinates\n                    WHERE ST_X(geom) = :x2 AND ST_Y(geom) = :y2 AND ST_Z(geom) = :z2\n                    AND study_id NOT IN (\n                        SELECT study_id FROM ns.coordinates\n                        WHERE ST_X(geom) = :x1 AND ST_Y(geom) = :y1 AND ST_Z(geom) = :z1\n                    )\n                \"\"\"), {\"x1\": x1, \"y1\": y1, \"z1\": z1, \"x2\": x2, \"y2\": y2, \"z2\": z2}).scalars().all()\n\n                payload = {\n                    \"studies_with_a_only\": list(studies_a),\n                    \"studies_with_b_only\": list(studies_b),\n                    \"coords_a\": [x1, y1, z1],\n                    \"coords_b\": [x2, y2, z2],\n                    \"count_a_only\": len(studies_a),\n                    \"count_b_only\": len(studies_b)\n                }\n                return jsonify(payload)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    return app\n\n# WSGI entry point\napp = create_app()\n\n\nPerfect! I've made two key improvements:\n\n\n1. Better Response Field Names 🏷️\n\n\nChanged from confusing set notation to clear, descriptive names:\n\n\nBefore:\n\n\n{\n  \"A_minus_B\": [...],\n  \"B_minus_A\": [...]\n}\n\n\nAfter:\n\n\n{\n  \"studies_with_a_only\": [...],\n  \"studies_with_b_only\": [...],\n  \"count_a_only\": 2,\n  \"count_b_only\": 5\n}\n\n\nNow your example response will look like:\n\n\n{\n  \"studies_with_a_only\": [\"24027520\", \"26197092\"],\n  \"studies_with_b_only\": [\"17611124\", \"17950623\", \"19199412\", \"27601666\", \"28602963\"],\n  \"coords_a\": [0, -52, 26],\n  \"coords_b\": [-2, 50, -6],\n  \"count_a_only\": 2,\n  \"count_b_only\": 5\n}\n\n\n2. Beautiful HTML Table for /test_db 📊\n\n\nInstead of raw JSON, you now get a clean, professional dashboard with:\n\n\n✅ Success status banner\n\n📈 Large stat cards showing counts\n\n📋 Formatted tables with sample data\n\n🎨 Modern, responsive design\n\n❌ Styled error pages if connection fails\n\n\nThe /test_db endpoint now displays your database stats in an easy-to-read format with proper number formatting (e.g., \"1,049,299\" instead of \"1049299\").\n\n\nRedeploy and your endpoints will be much more user-friendly! 🚀"
    }
  ]
}